/* The following code was generated by JFlex 1.6.0 */

/*
    CODE SECTION
*/
package Ph1;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>D:/Documents/Courses/Compiler Design/HW/Project/ALang/src/Ph1/lexer.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\17\1\20\1\20\1\17\22\0\1\55\2\0\1\4"+
    "\1\0\1\25\1\0\1\3\2\21\1\24\1\22\1\21\1\23\1\5"+
    "\1\16\12\2\1\35\1\21\1\32\1\34\1\33\2\0\32\1\1\30"+
    "\1\0\1\31\3\0\1\13\1\43\1\41\1\50\1\11\1\12\1\45"+
    "\1\42\1\36\2\1\1\14\1\46\1\37\1\40\1\44\1\1\1\7"+
    "\1\15\1\6\1\10\1\47\1\51\1\53\1\54\1\52\1\26\1\0"+
    "\1\27\7\0\1\20\u1fa2\0\1\20\1\20\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\10\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\4\13\1\15\0\1\20\1\21\1\22\1\23"+
    "\1\24\10\0\1\25\1\0\1\26\1\0\1\27\1\30"+
    "\1\31\4\0\1\32\3\0\1\33\2\0\1\34\17\0"+
    "\1\35\1\0\1\36\1\37\2\0\1\40\1\0\1\41"+
    "\11\0\1\42\3\0\1\43\1\44\1\45\5\0\1\46"+
    "\4\0\1\47\1\0\1\50\1\51\7\0\1\52\2\0"+
    "\1\53\1\54\1\0\1\55\1\0\1\56\1\0\1\57"+
    "\1\60\1\61\2\0\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\56\0\56\0\56\0\56"+
    "\0\56\0\56\0\56\0\56\0\56\0\u0228\0\u0256\0\56"+
    "\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6"+
    "\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536"+
    "\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6"+
    "\0\u06d4\0\u0702\0\56\0\56\0\56\0\56\0\u0730\0\u075e"+
    "\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce"+
    "\0\u08fc\0\u092a\0\u0958\0\u04ac\0\56\0\u0986\0\u09b4\0\u09e2"+
    "\0\u0a10\0\56\0\u0a3e\0\u0a6c\0\u0a9a\0\56\0\u0ac8\0\u0af6"+
    "\0\56\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38"+
    "\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8"+
    "\0\56\0\u0dd6\0\56\0\56\0\u0e04\0\u0e32\0\56\0\u0e60"+
    "\0\56\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2"+
    "\0\u0fd0\0\u0ffe\0\56\0\u102c\0\u105a\0\u1088\0\56\0\56"+
    "\0\56\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e\0\56\0\u119c"+
    "\0\u11ca\0\u11f8\0\u1226\0\56\0\u1254\0\56\0\56\0\u1282"+
    "\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\56\0\u13c4"+
    "\0\u13f2\0\56\0\56\0\u1420\0\56\0\u144e\0\56\0\u147c"+
    "\0\56\0\56\0\56\0\u14aa\0\u14d8\0\56";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\2\2\1\14\1\2\1\0\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\2\1\34"+
    "\1\2\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\2\2\1\44\1\2\60\0\1\3\2\0\1\45\51\0"+
    "\2\46\3\0\10\46\20\0\17\46\2\0\1\47\4\0"+
    "\10\47\20\0\17\47\10\0\1\50\61\0\1\51\106\0"+
    "\1\52\50\0\1\53\13\0\1\54\15\0\1\55\1\56"+
    "\23\0\1\57\54\0\1\60\5\0\1\61\26\0\1\62"+
    "\72\0\1\63\1\64\55\0\1\65\55\0\1\66\60\0"+
    "\1\67\31\0\1\70\104\0\1\71\26\0\1\72\24\0"+
    "\1\73\24\0\1\74\106\0\1\75\55\0\1\76\30\0"+
    "\1\77\53\0\1\100\26\0\1\101\57\0\1\102\26\0"+
    "\1\103\44\0\1\104\56\0\1\105\53\0\1\106\4\0"+
    "\10\106\20\0\17\106\11\0\1\107\114\0\1\110\14\0"+
    "\1\111\117\0\1\112\43\0\1\113\33\0\1\114\101\0"+
    "\1\115\24\0\1\116\113\0\1\117\23\0\1\120\42\0"+
    "\17\62\2\0\35\62\6\0\1\121\114\0\1\122\23\0"+
    "\1\123\114\0\1\124\43\0\1\125\55\0\1\126\67\0"+
    "\1\127\12\0\1\130\113\0\1\131\7\0\1\132\12\0"+
    "\1\133\114\0\1\134\15\0\1\135\24\0\1\136\74\0"+
    "\1\137\2\0\1\140\64\0\1\141\102\0\1\142\57\0"+
    "\1\143\23\0\1\144\64\0\1\107\53\0\1\145\55\0"+
    "\1\146\51\0\1\147\110\0\1\150\22\0\1\151\113\0"+
    "\1\152\24\0\1\153\106\0\1\154\46\0\1\155\30\0"+
    "\1\156\57\0\1\157\55\0\1\160\55\0\1\161\101\0"+
    "\1\162\55\0\1\163\32\0\1\164\110\0\1\165\10\0"+
    "\1\166\64\0\1\167\52\0\1\170\111\0\1\171\51\0"+
    "\1\172\32\0\1\173\53\0\1\174\53\0\1\175\105\0"+
    "\1\176\66\0\1\177\14\0\1\200\105\0\1\201\26\0"+
    "\1\202\53\0\1\203\60\0\1\204\57\0\1\205\44\0"+
    "\1\206\125\0\1\207\20\0\1\210\53\0\1\211\55\0"+
    "\1\212\53\0\1\213\103\0\1\214\63\0\1\215\24\0"+
    "\1\216\101\0\1\217\62\0\1\220\52\0\1\221\52\0"+
    "\1\222\64\0\1\223\24\0\1\224\53\0\1\225\55\0"+
    "\1\226\50\0\1\227\62\0\1\230\50\0\1\231\111\0"+
    "\1\232\55\0\1\233\22\0\1\234\105\0\1\235\31\0"+
    "\1\236\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5382];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\11\11\2\1\1\11\14\1\15\0"+
    "\1\1\4\11\10\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\11\4\0\1\11\3\0\1\11\2\0\1\11\17\0"+
    "\1\11\1\0\2\11\2\0\1\11\1\0\1\11\11\0"+
    "\1\11\3\0\3\11\5\0\1\11\4\0\1\11\1\0"+
    "\2\11\7\0\1\11\2\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\3\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public static void echoFinding(String text, String desc) throws java.io.IOException{
        java.io.FileWriter fw1 = new java.io.FileWriter("./src/Ph1/output.txt", true);
        java.io.FileWriter fw2 = new java.io.FileWriter("./src/lexemes.txt", true);
        java.io.BufferedWriter bw1 = new java.io.BufferedWriter(fw1);
        java.io.BufferedWriter bw2 = new java.io.BufferedWriter(fw2);
        String msg = text + "\t\t" + desc + "\t\t-";
        System.out.println(msg);
        bw1.write("\n"+msg);
        bw2.write("\n"+msg);
        bw1.close();
        bw2.close();
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { 
          }
        case 51: break;
        case 2: 
          { echoFinding(yytext(), "ADADSABET");
          }
        case 52: break;
        case 3: 
          { echoFinding(yytext(), "DIVIDE");
          }
        case 53: break;
        case 4: 
          { echoFinding(yytext(), "PUNCT");
          }
        case 54: break;
        case 5: 
          { echoFinding(yytext(), "PLUS");
          }
        case 55: break;
        case 6: 
          { echoFinding(yytext(), "MINUS");
          }
        case 56: break;
        case 7: 
          { echoFinding(yytext(), "MULTP");
          }
        case 57: break;
        case 8: 
          { echoFinding(yytext(), "MOD");
          }
        case 58: break;
        case 9: 
          { echoFinding(yytext(), "BLOCK_START");
          }
        case 59: break;
        case 10: 
          { echoFinding(yytext(), "BLOCK_END");
          }
        case 60: break;
        case 11: 
          { echoFinding(yytext(), "RANGE_START");
          }
        case 61: break;
        case 12: 
          { echoFinding(yytext(), "RANGE_END");
          }
        case 62: break;
        case 13: 
          { echoFinding(yytext(), "LT_KW");
          }
        case 63: break;
        case 14: 
          { echoFinding(yytext(), "GT_KW");
          }
        case 64: break;
        case 15: 
          { echoFinding(yytext(), "EQ_KW");
          }
        case 65: break;
        case 16: 
          { echoFinding(yytext(), "COMMENTS");
          }
        case 66: break;
        case 17: 
          { echoFinding(yytext(), "NEQ_KW");
          }
        case 67: break;
        case 18: 
          { echoFinding(yytext(), "LTE_KW");
          }
        case 68: break;
        case 19: 
          { echoFinding(yytext(), "GTE_KW");
          }
        case 69: break;
        case 20: 
          { echoFinding(yytext(), "ASSIGN_KW");
          }
        case 70: break;
        case 21: 
          { echoFinding(yytext(), "VA_KW");
          }
        case 71: break;
        case 22: 
          { echoFinding(yytext(), "DO_KW");
          }
        case 72: break;
        case 23: 
          { echoFinding(yytext(), "YA_KW");
          }
        case 73: break;
        case 24: 
          { echoFinding(yytext(), "REALCONST");
          }
        case 74: break;
        case 25: 
          { echoFinding(yytext(), "HARF");
          }
        case 75: break;
        case 26: 
          { echoFinding(yytext(), "END_KW");
          }
        case 76: break;
        case 27: 
          { echoFinding(yytext(), "FOR_KW");
          }
        case 77: break;
        case 28: 
          { echoFinding(yytext(), "INT_KW");
          }
        case 78: break;
        case 29: 
          { echoFinding(yytext(), "BOOLSABET");
          }
        case 79: break;
        case 30: 
          { echoFinding(yytext(), "UPTO_KW");
          }
        case 80: break;
        case 31: 
          { echoFinding(yytext(), "EXIT_KW");
          }
        case 81: break;
        case 32: 
          { echoFinding(yytext(), "AGAR_KW");
          }
        case 82: break;
        case 33: 
          { echoFinding(yytext(), "CHAR_KW");
          }
        case 83: break;
        case 34: 
          { echoFinding(yytext(), "WHEN_KW");
          }
        case 84: break;
        case 35: 
          { echoFinding(yytext(), "RAVIE_KW");
          }
        case 85: break;
        case 36: 
          { echoFinding(yytext(), "FLOAT_KW");
          }
        case 86: break;
        case 37: 
          { echoFinding(yytext(), "ANGAH_KW");
          }
        case 87: break;
        case 38: 
          { echoFinding(yytext(), "MORED_KW");
          }
        case 88: break;
        case 39: 
          { echoFinding(yytext(), "WHILE_KW");
          }
        case 89: break;
        case 40: 
          { echoFinding(yytext(), "SHENASE");
          }
        case 90: break;
        case 41: 
          { echoFinding(yytext(), "NAGHIZ_KW");
          }
        case 91: break;
        case 42: 
          { echoFinding(yytext(), "DOWNTO_KW");
          }
        case 92: break;
        case 43: 
          { echoFinding(yytext(), "BOOLEAN_KW");
          }
        case 93: break;
        case 44: 
          { echoFinding(yytext(), "PROGRAM_KW");
          }
        case 94: break;
        case 45: 
          { echoFinding(yytext(), "VAGARNA_KW");
          }
        case 95: break;
        case 46: 
          { echoFinding(yytext(), "DEFAULT_KW");
          }
        case 96: break;
        case 47: 
          { echoFinding(yytext(), "BAZGASHT_KW");
          }
        case 97: break;
        case 48: 
          { echoFinding(yytext(), "GOZINESH_KW");
          }
        case 98: break;
        case 49: 
          { echoFinding(yytext(), "VAANGAH_KW");
          }
        case 99: break;
        case 50: 
          { echoFinding(yytext(), "YAVAGARNA_KW");
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
